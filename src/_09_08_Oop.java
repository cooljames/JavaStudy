import java.util.Scanner;

/**
 * author James
 * 
 * 1) 객체치향
 * 
 * 스파게티(Spaghetti)code: 함수들이 서로 호출하는 방식으로 프로그래밍.
 * (스파게티 코드의 경우 서로 호출하는 방식이어서 유지보수가 곤란)
 * 구조적 프로그래밍 방식(커플링, 기능중심, 함수 중심의 언어: C언어)의 한계를 극복하고자 객체 지향형 프로그램이 나오게 됨.
 * 객체지향 언어: 데이터 중심 언어. 기능중심에서 데이터 중심으로 패러다임이 바뀐다.
 * 
 * 추상화(abstraction) : 실세계 문제(실체) ---> 개념 ---> 추상화 자료형(ADT: abstract data type)
 *                                 추상화   인간두뇌  프로그래밍  컴퓨터
 *                                 
 *  2) 객체: 추상화한 개념을 프로그램 요소로 정의한 것 데이터(상태변수:속성)와 오퍼레이터(메소드)로 구성됨
 *  
 *  3) 클래스: 객체를 만들기 위한 틀, 객체의 자료형으로 쓰임
 *           클래스에서 객체가 만들어지는 과정을 인스턴스화, 생성 객체를 인스턴스라하며 같은 의미로 사용
 *           
 *    구조체는 특별하게 수행하는 능동적 행동이 없다.      
 *    클래스를 기반으로 메모리에 로딩된 인스턴스, 객체.
 *     
 *  4) 상속 : 다시 재사용 해서 기존 클래스를 이용 
 *  5) 메시지: 객체간의 통신. 객체에게 메소드 수행을 요청하는 자극 
 *  6) 정보 은닉: (Data Hiding, Encapsulation): 클래스를 일종의 시스템 블랙 박스로 생각
 *  7) 다형성(Polymorphism): 동일한 기능에 대한 상황(문맥)에 따라 다르게 동작하는 프로그램을 쉽게 확장하는 법
 *  
 *     =======================
 *     객체
 *     =======================
 *      - 속성(데이터 + 행동)
 *      - 고유한 속성을 갖고 능동적으로 행동할 수 있는것 => 객체
 *      
 *      객체(오브젝트)
 *      - 속성: 정량적인 수치로 표현 가능한 데이터들
 *      - 행동: 기능, 행동(함수)
 *      
 *      
 *      // Oop의 3대 개념!!!
 *        - 캡슐화(약을 캡슐에 넣는 것: 약의 쓴맛을 은닉, 분산되는 가루를 한곳에 모을 수 있다.
 *         -> 하나의 클래스 디자인 - 클래스 내부를 구성할 수 있는 요소들에 대해서 학습!
 *           ---> 객체 내부를 디자인 하는 정보 은닉, 데이타 보호!!
 *        - 상속(여러개의 클래스가 있을 때 어떻게 구현할 것인가. 기존 클래스 구현을 상속받아 재사횽)
 *        - 다형성(메시지에 대한 객체의 반응)
 *      
 *      // class 문법
 *      
 *      
 *      <==== 캡슐화 ====>
 *      
 *      - class 클래스 이름 
 *      {
 *      멤버들.....
 *       - 속성: 필드, 멤버변수(c++) --> 데이타
 *       - 행동: 메소드, 멤버함수(c++) --> 기능
 *       - 기타 특수멤버 -> 생성자
 *      }
 */

 //===================
 //    ex) 학생 클래스
 //===================

class Student 
{ // 속성: 필드(멤버 변수)
	int studentNo; 	// 학번
	String name; 	// 이름
	int age; 		// 나이
	int score; 		// 성적
	
  // 행동: 메소드(멤버함수)
	void study()
	{
		score++;
	}
	void birthDay()
	{
		age++;
	}
	
}

public class _09_08_Oop {
	public static void main(String args[]) {
		
		Student student_1 = new Student();
		    // 학번, 이름, 나이, 성적이 저장될 수 있는 메모리가 힙에 생성된다. (instance 2개가 힙에 생성됨.)
			// 참조변수로 Stact에 값을 가지고, Object는 항상 Heap메모리에 있다.
		Student student_2 = new Student(); 
		Scanner scan = new Scanner(System.in);
	}
}
